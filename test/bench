#!/usr/bin/env php
<?php

namespace Test\Benchmark;

require_once __DIR__ . '/bootstrap.php';

use Mongo;
use MongoDB;
use MongoDate;
use Logger;
use ConcurrencyMongo\JobQueue\JobQueue;

echo 'bench' . PHP_EOL;

$log = Logger::getLogger(str_replace('\\', '.', __NAMESPACE__));

function elapsetime() {
  static $last=0;
  $now = microtime(true);
  $t = $now - $last;
  $last = $now;
  return $t;
}

function selectCollection(MongoDB $mongoDB, $name) {
  global $log;
  //$names = $mongoDB->getCollectionNames(); // undefined method why?
  $res = $mongoDB->execute('db.getCollectionNames();');
  if(!in_array($name, $res['retval'])){
    $log->info(sprintf('dorop skipping: %s collection not found.', $name));
    return false;
  }
  return $mongoDB->selectCollection($name);
}

function dropCollection(MongoDB $mongoDB, $name) {
  global $log;
  elapsetime();
  $mcJobQueue = selectCollection($mongoDB, $name);
  if($mcJobQueue === false) return;
  $res = $mcJobQueue->drop();
  if(@$res['ok'] != 1){
    $log->error(sprintf('could not drop %s collection : %s', $name, var_export($res, true)));
    exit(1);
  }
  $log->info(sprintf(
    'droped %s collection (cost %s sec) : %s',
    $name,
    number_format(elapsetime(), 3),
    $res['msg']
  ));
}

function queueing(MongoDB $mongoDB, $qty) {
  global $log;
  static $opts = array('name'=>'benchmark', 'autoIndex'=>true, 'bufferSize' => 100);
  $queue = new JobQueue($mongoDB, $opts);
  $log->trace(sprintf('queueing %10s jobs', number_format($qty)));
  elapsetime();
  $queue->enableBuffer();
  for ($i=1; $i<=$qty; $i++) {
    $queue->enqueue(
      sprintf('opid_%02d', $i % 97),
      sprintf('L%03d', $i % 101),
      sprintf('v_%2d', $i),
      array('priority' => $i % 89)
    );
  }
  $queue->disableBuffer();
  $cost = elapsetime();
  $ret = array();
  $ret['sec'     ] = $cost;
  $ret['KDoc/sec'] = $cost / ($qty / 1000);
  $log->info(sprintf(
    'queued   %10s (cost %6s sec. %s KDoc/sec)',
    number_format($queue->countJob()),
    number_format($ret['sec'     ], 3),
    number_format($ret['KDoc/sec'], 3)
  ));
  return $ret;
}



elapsetime();
$mongo = new Mongo();
$mongoDB = $mongo->selectDB('test_php_cncurrencymongo');
$mongoDB->setProfilingLevel(1);// 100ms
$log->info(sprintf('create MongoDB instance cost %s', number_format(elapsetime(), 3)));

$beginAt = time();
sleep(2);

//*
dropCollection($mongoDB, 'JobQueue_benchmark');
$v1 = queueing($mongoDB, 10000);

dropCollection($mongoDB, 'JobQueue_benchmark');
$v2 = queueing($mongoDB, 1000000);

$v3 = abs($v1['KDoc/sec'] - $v2['KDoc/sec']);
$v4 = min($v1['KDoc/sec'] , $v2['KDoc/sec']);
$v5 = 100 * $v3 / $v4;

$v6 = sprintf(
  'error of cost %s KDoc/sec (%s%%)',
  number_format($v3, 3),
  number_format($v5, 3)
);

$format = pack('c',0x1B) . "[%sm %s " . pack('c',0x1B) . "[m";

if ($v5 < 20.0) {
  $log->info(sprintf($format, '0;30;42', $v6));
} elseif ($v5 < 50.0) {
  $log->info(sprintf($format, '0;30;43', $v6));
} else {
  $log->info(sprintf($format, '0;37;41', $v6));
}
//*/

elapsetime();
$queue = new JobQueue($mongoDB, array('name'=>'benchmark'));
for ($i=1; $i<=10; $i++) {
  $opid  = sprintf('opid_%02d', $i % 83);
  $label = sprintf('L%03d'    , $i % 89);
  $job = $queue->findJob($opid, array($label));
  if(0 === $i % 2) {
    $job->done();
  } else {
    $job->release();
  }
}
$log->info(sprintf('find job cost %s', number_format(elapsetime(), 3)));


$sysProfile = selectCollection($mongoDB, 'system.profile');
if($sysProfile === false) {
  $log->error('not found system.profile collection.');
  exit(1);
}

$agg = array();
$query = array('ts'=>array('$gt'=>new MongoDate($beginAt)));
$cursor = $sysProfile->find($query)->sort(array('millis'=>-1));
foreach($cursor as $doc) {

  $ns = @$doc['ns'];
  if(is_null($ns)){
    $log->info('not found ns ' . var_export($doc, true));
    exit(1);
  }

  $op = @$doc['op'];
  if(is_null($op)){
    $log->info('not found op ' . var_export($doc, true));
    exit(1);
  }

  $millis = @$doc['millis'];
  if(is_null($millis)){
    $log->info('not found millis ' . var_export($doc, true));
    exit(1);
  }

  if(!isset($agg[$ns]     )) $agg[$ns]      = array();
  if(!isset($agg[$ns][$op])) $agg[$ns][$op] = array();

  $agg[$ns][$op][] = $millis;

}

foreach($agg as $ns=>$opVals){
  foreach($agg[$ns] as $op => $millis){
    $tmp = array();
    if(empty($millis)){
      $tmp['sample'] = 0;
    }else{
      $tmp['sample'] = count($millis);
      $v = array_shift($millis);
      $tmp['ave'] = $tmp['min'] = $tmp['max'] = $v;
      foreach($millis as $v2) {
        $tmp['ave'] = ($tmp['ave'] + $v2) / 2;
        $tmp['min'] = min($tmp['min'], $v2);
        $tmp['max'] = max($tmp['max'], $v2);
      }
    }
    $agg[$ns][$op] = $tmp;
  }
}

$buf = array();
foreach($agg as $ns=>$opVals){
  $buf[] = sprintf('%s',$ns);
  foreach($agg[$ns] as $op => $v1){
    $buf[] = sprintf('  %s',$op);
    foreach($agg[$ns][$op] as $k => $v){
      $buf[] = sprintf('    %-7s : %s', $k, $v);
    }
  }
}
if(empty($buf)){
  $log->info(sprintf($format, '0;30;42', 'no slow query'));
}else{
  echo implode(PHP_EOL, $buf) . PHP_EOL;
}

//var_export($agg);

